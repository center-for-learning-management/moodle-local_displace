{"version":3,"file":"competency.min.js","sources":["../src/competency.js"],"sourcesContent":["/* eslint-disable */\nimport $ from 'jquery';\nimport Ajax from 'core/ajax';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport * as Str from 'core/str';\nimport Config from 'core/config';\n\nconst debug = false;\n\n/**\n * Escape HTML special characters.\n * @param {string} str\n * @returns {string}\n */\nfunction escapeHTML(str) {\n  return str\n    .replace(/&/g, \"&amp;\")\n    .replace(/</g, \"&lt;\")\n    .replace(/>/g, \"&gt;\")\n    .replace(/\"/g, \"&quot;\")\n    .replace(/'/g, \"&#039;\");\n}\n\n/**\n * Escape regular expression special characters.\n * @param {string} str\n * @returns {string}\n */\nfunction escapeRegExp(str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\n/**\n * Get strings from the server.\n * @param {array} requests requested strings\n * @returns {Promise<*>}\n */\nasync function get_strings(requests) {\n  return Str.get_strings(requests).then(strings => {\n    var result = {};\n    requests.forEach((str, i) => {\n      result[i] = strings[i]; // backwards compatible\n      result[str.key] = strings[i];\n    });\n    return result;\n  });\n}\n\nconst getOnceCache = {};\n\nasync function getOnce(url) {\n  const cache = getOnceCache;\n\n  // Check if there's an ongoing request or a cached result for the URL\n  if (cache[url]) {\n    return cache[url];\n  }\n\n  // Start a new request and store the promise in the cache\n  cache[url] = $.get(url)\n    .then(html => {\n      cache[url] = Promise.resolve(html); // Update cache with the final result\n      return html;\n    })\n    .catch(error => {\n      delete cache[url]; // Remove from cache if the request fails\n      throw error;\n    });\n\n  // Return the ongoing or completed request\n  return cache[url];\n}\n\n/**\n * Initially collapse all competency frameworks.\n * @param {object} config\n */\nexport function competenciesSelectorInit(config) {\n  if (debug) {\n    console.log('competenciesSelectorInit');\n  }\n\n  const queue = [];\n  let queueActiveItem = false;\n\n  const useSessionCompetencies = !!config.session_competencies_input;\n  const courseid = Config.courseId > 1 && !useSessionCompetencies ? Config.courseId : 0;\n  const $sessionCompetenciesInput = config.session_competencies_input ? $('input[name=\"' + config.session_competencies_input + '\"]') : $();\n  let sessionCompetencies = [];\n\n  const sessionCompetenciesTmp = $sessionCompetenciesInput.val();\n  if (sessionCompetenciesTmp) {\n    sessionCompetencies = $sessionCompetenciesInput.val().split(',');\n  }\n\n  const $competenciesSelectorContainer = $('#' + config.id);\n  const $frameworkSelect = $competenciesSelectorContainer.find('select[name=\"frameworkid\"]');\n  const $searchInput = $competenciesSelectorContainer.find('.simplesearchform :input[type=\"text\"]');\n\n  $frameworkSelect.change(function () {\n    // clear old search\n    if ($searchInput.val()) {\n      $searchInput.val('').trigger('input');\n      updateSearch();\n    }\n\n    loadSelectedFramework();\n  });\n\n  $(function () {\n    // only load tree if container is visible\n    if ($competenciesSelectorContainer.is(':visible')) {\n      loadSelectedFramework();\n    } else {\n      var interval = setInterval(function () {\n        if ($competenciesSelectorContainer.is(':visible')) {\n          clearInterval(interval);\n          loadSelectedFramework();\n        }\n      }, 300);\n    }\n  });\n\n  $competenciesSelectorContainer\n    .on('click', '.has-children .toggler', function (e) {\n      e.preventDefault();\n      toggleNode(this, null);\n    })\n    // handle other events\n    .on('click', '.addsingle', function (e) {\n      e.preventDefault();\n      competencyAddSingle(this);\n    })\n    .on('click', '.addmultiple', function (e) {\n      e.preventDefault();\n      competencyAddMultiple(this);\n    })\n    .on('click', '.removesingle', function (e) {\n      e.preventDefault();\n      competencyRemoveSingle(this);\n    });\n\n  $competenciesSelectorContainer.on('click', '.simplesearchform .clear-button', function () {\n    $(this).closest('.clear-button-wrapper').find(':input[type=\"text\"]').val('').trigger('input').focus();\n    updateSearch();\n  });\n\n  $competenciesSelectorContainer.on('click', '.' +\n    'simplesearchform button', function () {\n    updateSearch();\n  });\n\n  $searchInput\n    .on('keypress', function (e) {\n      if (e.which === 13) {  // 13 is the Enter key code\n        // Action to perform when Enter is pressed\n        e.preventDefault();\n        updateSearch();\n      }\n    })\n    .on('input', function () {\n      const searchText = this.value.trim();\n      $(this).closest('.clear-button-wrapper').find('.clear-button').toggle(searchText.length > 0);\n    });\n\n  /**\n   * Add a single competency to a course.\n   * @param {HTMLElement} a sender of the event.\n   */\n  function competencyAddSingle(a) {\n    if (debug) {\n      console.log('Add single', a);\n    }\n\n    let id = $(a).closest('.competency-row').attr('data-id');\n\n    if (useSessionCompetencies) {\n      sessionCompetencies.push(id);\n      $(a).closest('.competency-row').addClass('used');\n      $sessionCompetenciesInput.val(sessionCompetencies.join(','));\n      return;\n    }\n\n    let method = 'core_competency_add_competency_to_course';\n    let data = {'courseid': courseid, 'competencyid': id};\n    queue.push({'methodname': method, 'args': data, row: $(a).closest('.competency-row')});\n    $(a).closest('.competency-row').addClass('queue-pending');\n    competencyQueue();\n  }\n\n  /**\n   * Add/Remove multiple competencies\n   * to/from a course.\n   * @param {HTMLElement} a sender of the event.\n   */\n  async function competencyAddMultiple(a) {\n    // Get the first child to decide if we\n    // add or remove.\n    let row = $(a).closest('.competency-row');\n    let children = getChildren(row)\n      // nur sichtbare hinzuf체gen, weil aufgrund der suche ggf welche versteckt sind\n      .filter(function () {\n        return $(this).closest('.hidden').length === 0;\n      });\n\n    /**\n     * mark children as removed\n     */\n    function removeNow() {\n      children.filter('.used').each(function () {\n        competencyRemoveSingle($(this).find('.removesingle'), true);\n      });\n    }\n\n    if (children.length > 0) {\n      // falls einer noch nicht ausgew채hlt ist, alle ausw채hlen, sonst alle abw채hlen\n      var selectAll = children.filter(':not(.used)').length > 0;\n\n      toggleNode(row, true);\n\n      if (selectAll) {\n        children.not('.used').each(function () {\n          competencyAddSingle($(this).find('.addsingle'));\n        });\n      } else {\n        if (useSessionCompetencies) {\n          removeNow();\n        } else {\n          let shortname = $(a).closest('.competency-row').find('.shortname').html();\n          const s = await get_strings([\n            {'key': 'competency:remove:title', component: 'local_displace'},\n            {'key': 'competency:remove:multiple', component: 'local_displace', param: {shortname}},\n            {'key': 'yes'},\n            {'key': 'no'}\n          ]);\n\n          Notification.confirm(\n            s[0], s[1], s[2], s[3],\n            removeNow\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove a single competency from a course.\n   * @param {HTMLElement} el sender of the event.\n   * @param {boolean} confirmed if the user confirmed the action.\n   */\n  async function competencyRemoveSingle(el, confirmed = false) {\n    if (useSessionCompetencies) {\n      let id = $(el).closest('.competency-row').attr('data-id');\n\n      sessionCompetencies = sessionCompetencies.filter((value) => value != id);\n      $(el).closest('.competency-row').removeClass('used');\n      $sessionCompetenciesInput.val(sessionCompetencies.join(','));\n      return;\n    }\n\n    if (!confirmed) {\n      var shortname = $(el).closest('.competency-row').find('.shortname').html();\n      const s = await get_strings([\n        {'key': 'competency:remove:title', component: 'local_displace'},\n        {'key': 'competency:remove:single', component: 'local_displace', param: {shortname}},\n        {'key': 'yes'},\n        {'key': 'no'}\n      ]);\n\n      Notification.confirm(\n        s[0], s[1], s[2], s[3],\n        function () {\n          competencyRemoveSingle(el, true);\n        }\n      );\n    } else {\n      if (debug) {\n        console.log('Remove single', el);\n      }\n      let id = $(el).closest('.competency-row').attr('data-id');\n      let method = 'core_competency_remove_competency_from_course';\n      let data = {'courseid': courseid, 'competencyid': id};\n      queue.push({'methodname': method, 'args': data, row: $(el).closest('.competency-row')});\n      $(el).closest('.competency-row').addClass('queue-pending');\n      competencyQueue();\n    }\n  }\n\n  /**\n   * Handles the next item in queue.\n   */\n  function competencyQueue() {\n    if (queueActiveItem) {\n      return;\n    }\n    if (queue.length == 0) {\n      return;\n    }\n    let item = queue.shift();\n    if (debug) {\n      console.log('Queue Item', item);\n    }\n    queueActiveItem = true;\n    Ajax.call([{\n      methodname: item.methodname,\n      args: item.args,\n      done: function (result) {\n        if (document.location.href.match(/coursecompetencies.php/)) {\n          // competencies list, remove the row\n          $(item.row).fadeOut(500, function () {\n            $(this).remove(); // Remove the <tr> from the DOM after fading out\n          });\n        } else {\n          $(item.row).removeClass('queue-pending');\n          if (debug) {\n            console.log('Results of ' + item.methodname, result);\n          }\n          if (result) {\n            if (item.methodname == 'core_competency_add_competency_to_course') {\n              $(item.row).addClass('used');\n            } else {\n              $(item.row).removeClass('used');\n            }\n            $(item.row).addClass('displace-alert success');\n            setTimeout(\n              function () {\n                $(item.row).removeClass('displace-alert success');\n              }, 1000\n            );\n          } else {\n            $(item.row).addClass('displace-alert danger');\n          }\n        }\n\n        queueActiveItem = false;\n        competencyQueue();\n      },\n      fail: function (ex) {\n        $(item.row).addClass('displace-alert danger');\n        queueActiveItem = false;\n        Notification.exception(ex);\n      }\n    }]);\n  }\n\n  /**\n   * Get the currently visible framework\n   * @returns {jQuery}\n   */\n  function getCurrentFramework() {\n    return $competenciesSelectorContainer.find('.local_displace-framework-container > *:visible').first();\n  }\n\n  /**\n   * get containers for all root nodes\n   * @param {jQuery?} $container\n   * @returns {*}\n   */\n  function getRootContainers($container) {\n    if (!$container) {\n      $container = getCurrentFramework();\n    }\n\n    return $container.find('.competency-root-container').children('.competency-container');\n  }\n\n  /**\n   * get all children of a competency\n   * @param {jQuery} row the competency row\n   * @returns {jQuery}\n   */\n  function getChildren(row) {\n    return $(row).closest('.competency-container').children('.competency-children').children().children('.competency-row');\n  }\n\n  /**\n   * Load the selected framework\n   * @returns {Promise<void>}\n   */\n  async function loadSelectedFramework() {\n    var selectedText = $frameworkSelect.find(\"option:selected\").text();\n\n    const s = await get_strings([\n      {key: 'competency:loading_framework', component: 'local_displace', param: selectedText}\n    ]);\n\n    // hide all other frameworks\n    $competenciesSelectorContainer.find('.local_displace-framework-container > *').hide();\n\n    var frameworkid = $frameworkSelect.val();\n    var $existingFramework = $competenciesSelectorContainer.find('.local_displace-framework-container > [data-frameworkid=\"' + frameworkid + '\"]');\n\n    if ($existingFramework.length) {\n      $existingFramework.show();\n    } else {\n      // Loading info table\n      var $container = $('<div data-frameworkid=\"' + frameworkid + '\">' + s[0] + '</div>')\n        .appendTo($competenciesSelectorContainer.find('.local_displace-framework-container'));\n\n      const ret = await getOnce(Config.wwwroot + '/local/displace/competency/coursecompetenciesadd.php?action=competency_selector_tree&courseid=' +\n        courseid + '&frameworkid=' + frameworkid);\n      $container.html('');\n      $container.append(ret);\n\n      sessionCompetencies.forEach((id) => {\n        $container.find('.competency-row[data-id=' + id + ']').addClass('used');\n      });\n\n      if (debug) {\n        console.log('root container', getRootContainers($container).length, getRootContainers($container));\n      }\n\n      openDefaultNodes();\n    }\n  }\n\n  /**\n   * Update the search results.\n   */\n  function updateSearch() {\n    const searchText = $searchInput.val().trim();\n\n    const $container = getCurrentFramework();\n\n    $competenciesSelectorContainer.find('.local_displace-table-search-not-entries-found-message').addClass('hidden');\n    $competenciesSelectorContainer.find('.local_displace-table-search-more-entries-found').addClass('hidden');\n\n    const $oldFoundRows = $container.find('.competency-row.is-found');\n    $oldFoundRows.removeClass('is-found');\n    $oldFoundRows.find('.shortname.highlighted').remove();\n\n    if (searchText.length == 0) {\n      // alle Elemente anzeigen\n      $container.find('.competency-container.hidden').removeClass('hidden');\n      // getRootContainers($container).removeClass('hidden');\n\n      if ($oldFoundRows.length) {\n        // leave tree as is\n      } else {\n        // last search was empty, so show default table\n\n        // first hide and close all\n        $container.find('.competency-row.open').removeClass('open');\n\n        openDefaultNodes();\n      }\n    } else {\n      // first hide and close all\n      $container.find('.competency-row.open').removeClass('open');\n      $container.find('.competency-container').addClass('hidden');\n\n      const searchParts = searchText.toLowerCase().split(/\\s+/);\n\n      // show found items\n      var $foundRows = $container.find('.shortname')\n        .filter((index, el) => {\n          var text = el.textContent.toLowerCase();\n          return searchParts.every(part => text.includes(part));\n        })\n        .closest('.competency-row');\n\n      const maxFound = 300;\n      const moreFound = $foundRows.length > maxFound;\n      $foundRows = $foundRows.slice(0, maxFound);\n\n      if ($foundRows.length) {\n        // mark them found\n        $foundRows.addClass('is-found');\n        // then open it and all parents\n        $foundRows.parents('.competency-container').children('.competency-row.has-children').addClass('open');\n        // show container and all parent containers\n        $foundRows.parents('.competency-container').removeClass('hidden');\n        // if a parent is found, show all children\n        $foundRows.closest('.competency-container').find('.competency-container.hidden').removeClass('hidden');\n\n        // highlight text inside the row\n        const escapedStr = searchParts.map(part => escapeRegExp(escapeHTML(part))).join('|');\n        const regexp = new RegExp(`(${escapedStr})`, 'gi');\n        $foundRows.find('.shortname').each(function (index, el) {\n          // replace each part with a <mark/> tag\n          $('<span class=\"shortname highlighted\">' + el.textContent.replace(regexp, '<mark>$1</mark>') + '</span>').insertBefore(el);\n        });\n\n        if (moreFound) {\n          $competenciesSelectorContainer.find('.local_displace-table-search-more-entries-found').removeClass('hidden')\n            .find('.num').html(maxFound);\n        }\n      } else {\n        $competenciesSelectorContainer.find('.local_displace-table-search-not-entries-found-message').removeClass('hidden');\n      }\n    }\n  }\n\n  /**\n   * Open all used competencies or at least first level\n   */\n  function openDefaultNodes() {\n    const $container = getCurrentFramework();\n\n    // open used competencies\n    $container.find('.competency-row.used').parents('.competency-container').children('.competency-row.has-children')\n      .addClass('open');\n\n    if (!document.location.href.match(/package_edit.php/) && $container.find('.open').length == 0) {\n      // erste ebene 철ffnen, aber nicht auf der package_edit.php, weil sonst wird die Liste zu lange\n      // und auch nicht, wenn schon Elemente ausgew채hlt sind\n      getRootContainers($container).each(function () {\n        toggleNode(this, true);\n      });\n    }\n  }\n\n  /**\n   * Recursively toggle nodes.\n   * @param {HTMLElement} el the node to toggle\n   * @param {boolean} open\n   */\n  function toggleNode(el, open = undefined) {\n    var $el = $(el);\n    if ($el.is('.competency-container')) {\n      $el = $el.children('.competency-row');\n    } else {\n      $el = $el.closest('.competency-row');\n    }\n    $el.toggleClass('open', open);\n  }\n}\n\n/**\n * Sets the rule outcome option.\n * @param {HTMLElement} select\n */\nexport function setRuleOutcomeOption(select) {\n  let pendingPromise = new Pending();\n  let requests = [];\n\n  let coursecompetencyid = $(select).closest('.competency-row').attr('data-coursecompetencyid');\n  let ruleoutcome = $(select).val();\n  requests = Ajax.call([\n    {\n      methodname: 'core_competency_set_course_competency_ruleoutcome',\n      args: {coursecompetencyid: coursecompetencyid, ruleoutcome: ruleoutcome}\n    },\n    {\n      methodname: 'tool_lp_data_for_course_competencies_page',\n      args: {courseid: $(select).closest('table').attr('data-courseid'), moduleid: 0}\n    }\n  ]);\n  requests[1].then(function () {\n    $(select).addClass('displace-alert success');\n    setTimeout(\n      function () {\n        $(select).removeClass('displace-alert success');\n      },\n      1000\n    );\n  })\n    .then(pendingPromise.resolve);\n}\n\n/**\n * Remove a single competency from a course and hide it from the list.\n * @param {HTMLElement} el\n * @returns {Promise<void>}\n */\nexport async function competencyRemoveFromList(el, confirmed = false) {\n  if (!confirmed) {\n    var shortname = $(el).closest('.competency-row').find('.shortname').html();\n    const s = await get_strings([\n      {'key': 'competency:remove:title', component: 'local_displace'},\n      {'key': 'competency:remove:single', component: 'local_displace', param: {shortname}},\n      {'key': 'yes'},\n      {'key': 'no'}\n    ]);\n\n    Notification.confirm(\n      s[0], s[1], s[2], s[3],\n      function () {\n        competencyRemoveFromList(el, true);\n      }\n    );\n  } else {\n    if (debug) {\n      console.log('Remove single', el);\n    }\n    let id = $(el).closest('.competency-row').attr('data-id');\n    let method = 'core_competency_remove_competency_from_course';\n    let data = {'courseid': Config.courseId, 'competencyid': id};\n    let $row = $(el).closest('.competency-row');\n    $row.addClass('queue-pending');\n\n    Ajax.call([{\n      methodname: method,\n      args: data,\n      done: function (result) {\n        // competencies list, remove the row\n        $row.fadeOut(500, function () {\n          $(this).remove(); // Remove the <tr> from the DOM after fading out\n        });\n      },\n      fail: function (ex) {\n        $row.addClass('displace-alert danger');\n        Notification.exception(ex);\n      }\n    }]);\n  }\n}\n"],"names":["config","queue","queueActiveItem","useSessionCompetencies","session_competencies_input","courseid","Config","courseId","$sessionCompetenciesInput","sessionCompetencies","val","split","$competenciesSelectorContainer","id","$frameworkSelect","find","$searchInput","competencyAddSingle","a","closest","attr","push","addClass","join","data","row","competencyQueue","competencyAddMultiple","children","getChildren","filter","this","length","removeNow","each","competencyRemoveSingle","selectAll","toggleNode","not","shortname","html","s","get_strings","component","param","confirm","el","confirmed","value","removeClass","method","item","shift","call","methodname","args","done","result","document","location","href","match","fadeOut","remove","setTimeout","fail","ex","exception","getCurrentFramework","first","getRootContainers","$container","loadSelectedFramework","selectedText","text","key","hide","frameworkid","$existingFramework","show","appendTo","ret","url","cache","getOnceCache","$","get","then","Promise","resolve","catch","error","getOnce","wwwroot","append","forEach","openDefaultNodes","updateSearch","searchText","trim","$oldFoundRows","searchParts","toLowerCase","$foundRows","index","textContent","every","part","includes","maxFound","moreFound","slice","parents","escapedStr","map","str","replace","escapeRegExp","regexp","RegExp","insertBefore","open","undefined","$el","is","toggleClass","change","trigger","interval","setInterval","clearInterval","on","e","preventDefault","focus","which","toggle","competencyRemoveFromList","$row","select","pendingPromise","Pending","requests","coursecompetencyid","ruleoutcome","Ajax","moduleid","Str","strings","i"],"mappings":"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"}